C51 COMPILER V9.51   NRF24L01                                                              05/03/2017 15:39:49 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN NRF24L01.obj
COMPILER INVOKED BY: F:\keil_for_arm\C51\BIN\C51.EXE NRF24L01\NRF24L01.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Delay;.\LCD;.
                    -\uart;.\gps;.\gsm900c;.\uart2_STC12C5A60S2;.\NRF24L01;..\³µÔØ·ÀµÁ) DEBUG OBJECTEXTEND PRINT(.\NRF24L01.lst) OBJECT(NRF24
                    -L01.obj)

line level    source

   1          #include "STC12C5A60S2.H"
   2          #include "Delay.h"
   3          #include "NRF24L01.h"
   4          
   5          sbit CE=P2^0;  //RX/TXÄ£Ê½Ñ¡Ôñ¶Ë
   6          sbit IRQ=P3^2; //¿ÉÆÁ±ÎÖÐ¶Ï¶Ë
   7          sbit CSN=P2^3; //SPIÆ¬Ñ¡¶Ë//¾ÍÊÇSS
   8          sbit MOSI=P2^4; //SPIÖ÷»úÊä³ö´Ó»úÊäÈë¶Ë
   9          sbit MISO=P2^2; //SPIÖ÷»úÊä³ö´Ó»úÊä³ö¶Ë
  10          sbit SCLK=P2^1; //SPIÊ±ÖÓ¶Ë
  11          unsigned char code TxAddr[]={0x19,0x94,0x09,0x12,0x01};//·¢ËÍµØÖ·
  12          /*****************×´Ì¬±êÖ¾*****************************************/
  13          unsigned char bdata sta;   //×´Ì¬±êÖ¾
  14          sbit RX_DR=sta^6;
  15          sbit TX_DS=sta^5;
  16          sbit MAX_RT=sta^4;
  17          /*****************SPIÊ±Ðòº¯Êý******************************************/
  18          unsigned char NRFSPI(unsigned char date)
  19          {
  20   1          unsigned char i;
  21   1          for(i=0;i<8;i++)          // Ñ­»·8´Î
  22   1          {
  23   2            if(date&0x80)
  24   2              MOSI=1;
  25   2            else
  26   2              MOSI=0;   // byte×î¸ßÎ»Êä³öµ½MOSI
  27   2            date<<=1;             // µÍÒ»Î»ÒÆÎ»µ½×î¸ßÎ»
  28   2            SCLK=1; 
  29   2            if(MISO)               // À­¸ßSCK£¬nRF24L01´ÓMOSI¶ÁÈë1Î»Êý¾Ý£¬Í¬Ê±´ÓMISOÊä³ö1Î»Êý¾Ý
  30   2              date|=0x01;         // ¶ÁMISOµ½byte×îµÍÎ»
  31   2            SCLK=0;               // SCKÖÃµÍ
  32   2          }
  33   1          return(date);               // ·µ»Ø¶Á³öµÄÒ»×Ö½Ú
  34   1      }
  35          /**********************NRF24L01³õÊ¼»¯º¯Êý*******************************/
  36          void NRF24L01Int()
  37          {
  38   1          Delay_ms(2);//ÈÃÏµÍ³Ê²Ã´¶¼²»¸É
  39   1          CE=0; //´ý»úÄ£Ê½1   
  40   1          CSN=1;  
  41   1          SCLK=0;
  42   1          IRQ=1;   
  43   1      }
  44          /*****************SPI¶Á¼Ä´æÆ÷Ò»×Ö½Úº¯Êý*********************************/
  45          unsigned char NRFReadReg(unsigned char RegAddr)
  46          {
  47   1         unsigned char BackDate;
  48   1         CSN=0;//Æô¶¯Ê±Ðò
  49   1         NRFSPI(RegAddr);//Ð´¼Ä´æÆ÷µØÖ·
  50   1         BackDate=NRFSPI(0x00);//Ð´Èë¶Á¼Ä´æÆ÷Ö¸Áî  
  51   1         CSN=1;
  52   1         return(BackDate); //·µ»Ø×´Ì¬
  53   1      }
C51 COMPILER V9.51   NRF24L01                                                              05/03/2017 15:39:49 PAGE 2   

  54          /*****************SPIÐ´¼Ä´æÆ÷Ò»×Ö½Úº¯Êý*********************************/
  55          unsigned char NRFWriteReg(unsigned char RegAddr,unsigned char date)
  56          {
  57   1         unsigned char BackDate;
  58   1         CSN=0;//Æô¶¯Ê±Ðò
  59   1         BackDate=NRFSPI(RegAddr);//Ð´ÈëµØÖ·
  60   1         NRFSPI(date);//Ð´ÈëÖµ
  61   1         CSN=1;
  62   1         return(BackDate);
  63   1      }
  64          /*****************SPI¶ÁÈ¡RXFIFO¼Ä´æÆ÷µÄÖµ********************************/
  65          unsigned char NRFReadRxDate(unsigned char RegAddr,unsigned char *RxDate,unsigned char DateLen)
  66          {  //¼Ä´æÆ÷µØÖ·//¶ÁÈ¡Êý¾Ý´æ·Å±äÁ¿//¶ÁÈ¡Êý¾Ý³¤¶È//ÓÃÓÚ½ÓÊÕ
  67   1          unsigned char BackDate,i;
  68   1          CSN=0;//Æô¶¯Ê±Ðò
  69   1          BackDate=NRFSPI(RegAddr);//Ð´ÈëÒª¶ÁÈ¡µÄ¼Ä´æÆ÷µØÖ·
  70   1          for(i=0;i<DateLen;i++) //¶ÁÈ¡Êý¾Ý
  71   1          {
  72   2              RxDate[i]=NRFSPI(0);
  73   2          } 
  74   1          CSN=1;
  75   1         return(BackDate); 
  76   1      }
  77          /*****************SPIÐ´ÈëTXFIFO¼Ä´æÆ÷µÄÖµ**********************************/
  78          unsigned char NRFWriteTxDate(unsigned char RegAddr,unsigned char *TxDate,unsigned char DateLen)
  79          { //¼Ä´æÆ÷µØÖ·//Ð´ÈëÊý¾Ý´æ·Å±äÁ¿//¶ÁÈ¡Êý¾Ý³¤¶È//ÓÃÓÚ·¢ËÍ
  80   1         unsigned char BackDate,i;
  81   1         CSN=0;
  82   1         BackDate=NRFSPI(RegAddr);//Ð´ÈëÒªÐ´Èë¼Ä´æÆ÷µÄµØÖ·
  83   1         for(i=0;i<DateLen;i++)//Ð´ÈëÊý¾Ý
  84   1         {
  85   2             NRFSPI(*TxDate++);
  86   2         }   
  87   1         CSN=1;
  88   1         return(BackDate);
  89   1      }
  90          /*****************NRFÉèÖÃÎª·¢ËÍÄ£Ê½²¢·¢ËÍÊý¾Ý******************************/
  91          void NRFSetTxMode(unsigned char *TxDate)
  92          {//·¢ËÍÄ£Ê½
  93   1          CE=0; 
  94   1          NRFWriteTxDate(W_REGISTER+TX_ADDR,TxAddr,TX_ADDR_WITDH);//Ð´¼Ä´æÆ÷Ö¸Áî+½ÓÊÕµØÖ·Ê¹ÄÜÖ¸Áî+½ÓÊÕµØÖ·+µØÖ·¿
             -í¶È
  95   1          NRFWriteTxDate(W_REGISTER+RX_ADDR_P0,TxAddr,TX_ADDR_WITDH);//ÎªÁËÓ¦´ð½ÓÊÕÉè±¸£¬½ÓÊÕÍ¨µÀ0µØÖ·ºÍ·¢ËÍµØÖ·
             -ÏàÍ¬
  96   1          NRFWriteTxDate(W_TX_PAYLOAD,TxDate,TX_DATA_WITDH);//Ð´ÈëÊý¾Ý 
  97   1          /******ÏÂÃæÓÐ¹Ø¼Ä´æÆ÷ÅäÖÃ**************/
  98   1          NRFWriteReg(W_REGISTER+EN_AA,0x01);       // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
  99   1          NRFWriteReg(W_REGISTER+EN_RXADDR,0x01);   // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
 100   1          NRFWriteReg(W_REGISTER+SETUP_RETR,0x0a);  // ×Ô¶¯ÖØ·¢ÑÓÊ±µÈ´ý250us+86us£¬×Ô¶¯ÖØ·¢10´Î
 101   1          NRFWriteReg(W_REGISTER+RF_CH,0x40);         // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
 102   1          NRFWriteReg(W_REGISTER+RF_SETUP,0x07);    // Êý¾Ý´«ÊäÂÊ1Mbps£¬·¢Éä¹¦ÂÊ0dBm£¬µÍÔëÉù·Å´óÆ÷ÔöÒæ
 103   1          NRFWriteReg(W_REGISTER+CONFIG,0x0e);      // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç  
 104   1          CE=1;
 105   1          Delay_ms(5);//±£³Ö10usÃëÒÔÉÏ
 106   1      }
 107          /*****************NRFÉèÖÃÎª½ÓÊÕÄ£Ê½²¢½ÓÊÕÊý¾Ý******************************/
 108          //Ö÷Òª½ÓÊÕÄ£Ê½
 109          void NRFSetRXMode()
 110          {
 111   1          CE=0;  
 112   1          NRFWriteTxDate(W_REGISTER+RX_ADDR_P0,TxAddr,TX_ADDR_WITDH);  // ½ÓÊÕÉè±¸½ÓÊÕÍ¨µÀ0Ê¹ÓÃºÍ·¢ËÍÉè±¸ÏàÍ¬µÄ·
             -¢ËÍµØÖ·
C51 COMPILER V9.51   NRF24L01                                                              05/03/2017 15:39:49 PAGE 3   

 113   1          NRFWriteReg(W_REGISTER+EN_AA,0x01);               // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
 114   1          NRFWriteReg(W_REGISTER+EN_RXADDR,0x01);           // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
 115   1          NRFWriteReg(W_REGISTER+RF_CH,0x40);                 // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
 116   1          NRFWriteReg(W_REGISTER+RX_PW_P0,TX_DATA_WITDH);  // ½ÓÊÕÍ¨µÀ0Ñ¡ÔñºÍ·¢ËÍÍ¨µÀÏàÍ¬ÓÐÐ§Êý¾Ý¿í¶È
 117   1          NRFWriteReg(W_REGISTER+RF_SETUP,0x07);            // Êý¾Ý´«ÊäÂÊ1Mbps£¬·¢Éä¹¦ÂÊ0dBm£¬µÍÔëÉù·Å´óÆ÷ÔöÒæ*/
 118   1          NRFWriteReg(W_REGISTER+CONFIG,0x0f);              // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç£¬½ÓÊÕÄ£Ê½
 119   1          CE = 1;
 120   1          Delay_ms(5);//±£³Ö10usÃëÒÔÉÏ     
 121   1      }
 122          /****************************¼ì²âÓ¦´ðÐÅºÅ******************************/
 123          unsigned char CheckACK()
 124          {  //ÓÃÓÚ·¢Éä
 125   1          sta=NRFReadReg(R_REGISTER+STATUS);                    // ·µ»Ø×´Ì¬¼Ä´æÆ÷
 126   1          if(TX_DS||MAX_RT) //·¢ËÍÍê±ÏÖÐ¶Ï
 127   1          {
 128   2             NRFWriteReg(W_REGISTER+STATUS,0xff);  // Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
 129   2             CSN=0;
 130   2             NRFSPI(FLUSH_TX);//ÓÃÓÚÇå¿ÕFIFO £¡£¡¹Ø¼ü£¡£¡²»È»»á³öÏÖÒâÏë²»µ½µÄºó¹û£¡£¡£¡´ó¼Ò¼Ç×¡£¡£¡  
 131   2             CSN=1; 
 132   2             return(0);
 133   2          }
 134   1          else
 135   1             return(1);
 136   1      }
 137          /******************ÅÐ¶ÏÊÇ·ñ½ÓÊÕÊÕµ½Êý¾Ý£¬½Óµ½¾Í´ÓRXÈ¡³ö*********************/
 138          //ÓÃÓÚ½ÓÊÕÄ£Ê½
 139          unsigned char NRFRevDate(unsigned char *RevDate)
 140          {
 141   1           unsigned char RevFlags=0;
 142   1           sta=NRFReadReg(R_REGISTER+STATUS);//·¢ËÍÊý¾Ýºó¶ÁÈ¡×´Ì¬¼Ä´æÆ÷
 143   1           if(RX_DR)              // ÅÐ¶ÏÊÇ·ñ½ÓÊÕµ½Êý¾Ý
 144   1           {
 145   2              CE=0;           //SPIÊ¹ÄÜ
 146   2              NRFReadRxDate(R_RX_PAYLOAD,RevDate,RX_DATA_WITDH);// ´ÓRXFIFO¶ÁÈ¡Êý¾Ý
 147   2              RevFlags=1;    //¶ÁÈ¡Êý¾ÝÍê³É±êÖ¾
 148   2            }
 149   1           NRFWriteReg(W_REGISTER+STATUS,0xff); //½ÓÊÕµ½Êý¾ÝºóRX_DR,TX_DS,MAX_PT¶¼ÖÃ¸ßÎª1£¬Í¨¹ýÐ´1À´Çå³þÖÐ¶Ï±ê
 150   1           return(RevFlags);
 151   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    395    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
